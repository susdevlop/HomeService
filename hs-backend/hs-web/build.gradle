// 尝试从 Git 标签获取版本号
def getVersionFromGit() {
    try {
        def tag = 'git describe --tags --abbrev=0'.execute().text.trim()
        return tag
    } catch (Exception e) {
        println "Failed to get version from Git tags: ${e.message}"
        return null
    }
}
// 从 version.properties 文件获取版本号
def getVersionFromProperties() {
    def versionFile = file('./src/main/resources/gradle.properties')
    def properties = new Properties()
    // 尝试从文件中读取版本号
    if (versionFile.exists()) {
        try {
            versionFile.withInputStream { properties.load(it) }
            return properties.getProperty('version')
        } catch (Exception e) {
            println "Failed to load version from version.properties: ${e.message}"
            return null
        }
    } else {
        println "version.properties file not found."
        return null
    }
}
// 主逻辑：先尝试从 Git 获取版本号，失败则从 version.properties 获取
def getVersion() {
    def version = getVersionFromGit()
    if (version == null || version == "") {
        version = getVersionFromProperties()
    }
    def v = version ?: '1.0.0-default'  // 如果都获取不到，则返回一个默认版本号
    println("当前版本号:"+v)
    return v
}


plugins {
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

version = ''


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

// 将依赖包复制到lib目录
task copyJar(type: Copy) {
    // 清除现有的lib目录
    delete "$buildDir\\libs\\lib"
    from configurations.runtimeClasspath
    into "$buildDir\\libs\\lib"
    from configurations.compileClasspath
    into "$buildDir\\libs\\lib"
}

// 拷贝配置文件
task copyConfigFile(type: Copy) {
    // 清除现有的配置目录
    delete "$buildDir\\libs\\config"
    from('src/main/resources')
    into 'build/libs/config'
}


// 配置bootJar进行打包
bootJar {
    // jar包名称，默认是settings.gradle下的工程名 rootProject.name = 'alog-server'
    archiveBaseName = 'hs-backend'
    // jar包版本号
    archiveVersion = getVersion()
    mainClass.set('us.sushome.hsweb.HsWebApplication')
    // 排除所有的jar
    excludes = ["*.jar","**/.idea/**"]
    // lib目录的清除和复制任务
    dependsOn copyJar
    // 配置目录的清除和复制任务
    dependsOn copyConfigFile

    // 指定依赖包的路径
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}