import java.util.Properties
buildscript {
	allprojects {
		gradle.projectsEvaluated {
			allprojects {
				jar{ enabled = true }
			}
		}
	}
}

plugins {
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}
// 尝试从 Git 标签获取版本号
def getVersionFromGit() {
	try {
		def tag = 'git describe --tags --abbrev=0'.execute().text.trim()
		return tag
	} catch (Exception e) {
		println "Failed to get version from Git tags: ${e.message}"
		return null
	}
}
// 从 version.properties 文件获取版本号
def getVersionFromProperties() {
	def versionFile = file('./src/main/resources/gradle.properties')
	def properties = new Properties()
	// 尝试从文件中读取版本号
	if (versionFile.exists()) {
		try {
			versionFile.withInputStream { properties.load(it) }
			return properties.getProperty('version')
		} catch (Exception e) {
			println "Failed to load version from version.properties: ${e.message}"
			return null
		}
	} else {
		println "version.properties file not found."
		return null
	}
}
allprojects {
	apply plugin: 'java-library'
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'groovy'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}
	group = 'us.sushome'
	repositories {
		maven { url 'https://maven.aliyun.com/repository/public' }
		mavenCentral()
	}
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}
	compileTestJava.enabled = false
	processTestResources.enabled = false
	testClasses.enabled = false
	test.enabled = false
	ext {
		getBuildVersion = {
			def version = getVersionFromGit()
			if (version == null || version == "") {
				version = getVersionFromProperties()
			}
			def v = version ?: '1.0.0-default'  // 如果都获取不到，则返回一个默认版本号
			println("当前版本号:"+v)
			return v
		}
	}
}

subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	dependencies {
		//implementation 'org.springframework.boot:spring-boot-starter'
		//testImplementation 'org.springframework.boot:spring-boot-starter-test'

		runtimeOnly 'com.mysql:mysql-connector-j'
		//implementation 'org.slf4j:slf4j-api:1.7.36'
		// Logback 实现
		//implementation 'ch.qos.logback:logback-classic:1.2.11' // 使用最新稳定版
		testImplementation platform('org.junit:junit-bom:5.9.1')
		testImplementation 'org.junit.jupiter:junit-jupiter'

		implementation 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}
	configurations {
		implementation {
			// 排除 logback 依赖（使用 log4j2）
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
	}

	tasks.named('test', Test) {
		useJUnitPlatform()
	}
}
//version = '0.0.1-SNAPSHOT'


dependencies {

}


tasks.named('test', Test) {
	useJUnitPlatform()
}


tasks.named('bootJar').configure {
	enabled = false
}